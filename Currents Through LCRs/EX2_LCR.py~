from pylab import *
from numpy import *
from scipy.optimize import leastsq

data = loadtxt("Ex2_LCR.txt", dtype='float', skiprows=1)

m_frequency = arange(10,1000000)
frequency = data[:, 0] * 2. * pi
voltage = data[:, 1]
v_error = ones(len(voltage)) * 0.005
voltage_resistor = data[:, 2]
vr_error = ones(len(voltage_resistor)) * 0.005
#Convert the phase difference data into seconds.
phase_diff = data[:, 3] * 10 ** -6.
#Resistances of resistors in ohms.
resistance = [96700., 28740., 473500., 12750., 3114., 517.2]
resistance_error = 0.05
Z = voltage / voltage_resistor * resistance[5]

ratio = sqrt((v_error / voltage) ** 2 + (vr_error / voltage_resistor) ** 2) * voltage / voltage_resistor
Z_error = sqrt((ratio / (voltage / voltage_resistor)) ** 2 + (resistance_error / resistance[5]) ** 2) * Z
  
#Value of inductance of coil in henries
inductor = 0.04
#Capacitance in Farads
capacitor = 0.022 * 10 ** -6
p = zeros(2)
p[0] = 0.5
p[1] = 2.


def impedance(frequency, p):
    return p[1] * ((frequency * inductor - 1. / (frequency * capacitor)) ** 2 +
            resistance[5] ** 2) ** p[0]


def residuals(p, Z, frequency):
    return Z - impedance((frequency), p)

        
p_final, cov_x, info, mesg, success = leastsq(residuals, p,
args=(Z, log(frequency)), full_output=True)

#p_final is a value obtained from the leastsq function.
y_final = impedance(log(frequency), p_final)
chi2 = sum((Z - y_final) ** 2. / abs(Z_error) ** 2)
#Degrees of freedom.
dof = len(frequency) - len(p_final)
#Reduced chi-squared value is calculated.
print "RMS of residuals (sqrt(chisquared/dof))", sqrt(chi2 / dof)

for i in range(len(p_final)):
    print "p[%d] =%12.10e +/- %.11e" % (i, p_final[i], sqrt(cov_x[i, i]))

#errorbar(log(frequency), Z, Z_error, fmt='r+')

title("LCR circuit")
plot(log(m_frequency), impedance(log(m_frequency), p_final), linestyle=':',
        marker='o', label='Model')
#plot(log(frequency), Z, linestyle=':', marker='.', label='Experimental Data')
legend()
xlabel(r'$\ln{\omega}$')
ylabel(r'$|Z|$')
show()
